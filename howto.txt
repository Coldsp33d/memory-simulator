HLL - MU0 Compiler HOWTO

Using the input console, you can write python-like code which will then be translated into MU0 instruction code. 
The compiler supports the following language constructs:

- Statements (declaration/arithmetic operations) which are not separated by semicolons. 
  To use variables, they must first be declared.

- All arithmetic operations (+, -, *, /, %, ^, unary -) with precedence rules observed. 
  Operations MUST be in terms of variables. MU0 does not support direct addressing. 
	To do something like i = i + 1, write the code as such.
				one = 1
				i = i + one 		# make sure i is declared already

- Single line comments using '#' and multiline comments using '/* ...... */'

- The three basic loops (flower braces are necessary): 
	(i) while ( condition ) { statements }  
	(ii) do { statements } while ( condition )
	(iii) for ( initial ; condition ; update ) { statements } 
	      ('initial' and 'update' are optional and can be multiple comma separated statements, 
		however they can only consist of the basic arithmetic operations involving '+' and '-')

	Non-labelled break and continue is supported for all loops, and will only break out of the innermost loop.

- if ( condition ) { statements } else { statements }
	'else' is optional, but the braces are not. There is no direct support for else if, 
	however you can use if ( .. ) { .. } else { if ( .. ) { .. } } to simulate it.

- All control structures may be nested within themselves or each other and to any depth

- Basic syntax checking is done.

- Note the following: 
	- Variables must be declared first before their use in arithmetic/boolean operations, and it is not advised to 
	  redeclare them later
	- All arithmetic operations must be in terms of variables only, otherwise the simulator cannot execute those 
	  instructions
	- All boolean expressions (such as those used in the loops and if statement) must only be in terms of variables, 
	  and must be binary (Eg: a <= b or a != b)
	- Naive translation of instructions is done by the compiler
	- No subroutine/OOP support
	- No direct addressing support
	- No floating point arithmetic support
